name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'The tag to build (e.g., v0.1.0). A changelog file for this tag MUST exist.'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build_and_pack:
    name: Build & Pack on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win-x64
            rid: win-x64
            tfm: net8.0-windows

          - os: ubuntu-latest
            platform: linux-x64
            rid: linux-x64
            tfm: net8.0

          - os: ubuntu-latest
            platform: linux-arm64
            rid: linux-arm64
            tfm: net8.0

          - os: macos-latest
            platform: osx-x64
            rid: osx-x64
            tfm: net8.0-macos

          - os: macos-latest
            platform: osx-arm64
            rid: osx-arm64
            tfm: net8.0-macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Velopack CLI
        run: dotnet tool install vpk -g

      - name: Get App Version from .csproj
        id: get_version
        run: |
          $version = ([xml](Get-Content -Path ProseFlow.UI/ProseFlow.UI.csproj)).Project.PropertyGroup.Version
          echo "APP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Set up QEMU for ARM64 cross-compilation
        if: matrix.platform == 'linux-arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Restore .NET Workloads
        run: dotnet workload restore

      - name: Publish application
        run: |
          PUBLISH_ARGS=""
          if [[ ! "${{ matrix.platform }}" =~ ^osx-.* ]]; then
            PUBLISH_ARGS="-p:PublishSingleFile=true"
          fi
          if [[ "${{ matrix.platform }}" =~ ^osx-.* ]]; then
            PUBLISH_ARGS="$PUBLISH_ARGS -p:CreatePackage=false"
          fi
          
          dotnet publish ProseFlow.UI \
            -c Release \
            -r ${{ matrix.rid }} \
            --self-contained \
            -f ${{ matrix.tfm }} \
            -p:UseAppHost=true \
            -o "publish" \
            $PUBLISH_ARGS
        shell: bash

      - name: Pack with Velopack
        run: |
          $originalNotesFile = "Changelogs/${{ github.event_name == 'push' && github.ref_name || inputs.version }}.md"
          $sanitizedNotesFile = "sanitized-notes.md"
          $originalContent = Get-Content -Path $originalNotesFile -Raw
          $sanitizedContent = [System.Security.SecurityElement]::Escape($originalContent)
          Set-Content -Path $sanitizedNotesFile -Value $sanitizedContent -Encoding utf8
          
          if ("${{ matrix.platform }}".StartsWith("osx-")) {
            $packDir = "ProseFlow.UI/bin/Release/${{ matrix.tfm }}/${{ matrix.rid }}"
            vpk pack `
              -u ProseFlow `
              -v ${{ env.APP_VERSION }} `
              -p $packDir `
              -o "Velo-Output" `
              -r ${{ matrix.rid }} `
              --channel ${{ matrix.platform }} `
              --releaseNotes $sanitizedNotesFile `
              --mainExe ProseFlow.app/Contents/MacOS/ProseFlow
          } else {
            vpk pack `
              -u ProseFlow `
              -v ${{ env.APP_VERSION }} `
              -p "publish" `
              -o "Velo-Output" `
              -r ${{ matrix.rid }} `
              --channel ${{ matrix.platform }} `
              --releaseNotes $sanitizedNotesFile
          }
        shell: pwsh

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.platform }}
          path: Velo-Output/*
  
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_and_pack

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get App Version from .csproj
        id: get_version
        run: |
          version=$(grep '<Version>' ProseFlow.UI/ProseFlow.UI.csproj | sed -e 's/.*<Version>\(.*\)<\/Version>.*/\1/')
          echo "APP_VERSION=$version" >> $GITHUB_ENV
        shell: bash

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: release-artifacts-*
          merge-multiple: true

      - name: List downloaded files
        run: ls -R release-assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2.3.3
        with:
          tag_name: ${{ github.event_name == 'push' && github.ref_name || inputs.version }}
          name: "ProseFlow ${{ github.event_name == 'push' && github.ref_name || inputs.version }}"
          body_path: "Changelogs/${{ github.event_name == 'push' && github.ref_name || inputs.version }}.md"
          files: release-assets/*